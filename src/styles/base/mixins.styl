/*--------------------------------------
    Some mixins from Nib library
--------------------------------------*/
size()
  if length(arguments) == 1
    width: arguments[0]
    height: arguments[0]
  else
    width: arguments[0]
    height: arguments[1]

hide-text()
  font: 0/0 serif;

border(color, args...)
  if color is a 'color'
    border: 1px solid color args
  else
    border: arguments

replace-text(image, x=50%, y=50%)
  hide-text()
  background-image image
  background-repeat no-repeat
  background-position x y

ellipsis(no-wrap = true)
  if no-wrap
    white-space: nowrap
    overflow: hidden
    text-overflow: ellipsis

-pos(type, args)
  i = 0
  position: unquote(type)
  for j in (1..4)
    if length(args) > i
      {args[i]}: args[i + 1] is a 'unit' ? args[i += 1] : 0
    i += 1

fixed()
  -pos('fixed', arguments)

absolute()
  -pos('absolute', arguments)

relative()
  -pos('relative', arguments)


/*--------------------------------------
  Shortcuts for pseudo-elements
--------------------------------------*/
pb()
  content: '';
  display: block;
  absolute: arguments

pi($align = auto)
  content: '';
  display: inline-block;
  vertical-align $align


/*--------------------------------------
  Quick image insert
--------------------------------------*/
img($name, $position = '50% 50%', $repeat = no-repeat)
  background-image data($img-path + $name)
  background-repeat $repeat
  background-position unquote($position)


/*--------------------------------------
  Colors for states(hover, focus, etc)
--------------------------------------*/

color()
  if length(arguments) == 1
    &,&:hover,&:focus,&:active,&:visited
      color: arguments[0]
  else if length(arguments) == 2
    &,&:active,&:visited
      color: arguments[0]
    &:hover,&:focus
      color: arguments[1]
  else
    return


placeholder($color){
  &::-webkit-input-placeholder {color: $color}
  &:-moz-placeholder           {color: $color}
  &::-moz-placeholder          {color: $color}
  &:-ms-input-placeholder      {color: $color}
}


brand($size, $color = $brand-c)
  font $size $brand-f
  color: $color

title($size, $color = $title-c)
  font $size $title-f
  color: $color

/*--------------------------------------
    Layout helpers
--------------------------------------*/
hLine($align = baseline)
  &>*
    display: inline-block
    vertical-align: $align

  if $align == none
    &>*
      display: block
      vertical-align: auto
      vertical-align: initial


jLine($align = baseline)
  .flexbox &
    display flex
    justify-content space-between
    align-items $align
    if $align == top
      align-items flex-start
    if $align == bottom
      align-items flex-end
    if $align == middle
      align-items center
  .no-flexbox &
    hLine $align
    if $align == stretch
      hLine middle
    text-align: justify
    font-size: 1px
    line-height: 0
    text-justify: newspaper
    zoom: 1
    text-align-last: justify
    &:after
      pi()
      height: 0
      overflow: hidden
      visibility: hidden
      width: 100%
    &>*
      text-align: left
      font-size: $base-f-size
      line-height: $base-f-height


vAlign($type = middle, $full = true)
  hLine $type
  &:after
    pi $type
    size: 0 100%
  //prevent bugs on small screens
  white-space nowrap
  &>*
    white-space normal
    if $full == true
      width: 100%


ctr()
  position absolute
  if arguments[0] == all
    left 50%
    top 50%
  else
    {arguments[0]} 50%

  .csstransforms &
    if arguments[0] == top
      transform translateY(-50%)
    if arguments[0] == left
      transform translateX(-50%)
    if arguments[0] == all
      transform translate(-50%, -50%)

  .no-csstransforms &
    if arguments[0] == top
      margin-top -(arguments[1] / 2)
    if arguments[0] == left
      margin-left -(arguments[1] / 2)
    if arguments[0] == all
      margin-top -(arguments[2] / 2)
      margin-left -(arguments[1] / 2)


container($width = $base-max-w)
  max-width: $width
  min-width $base-min-w
  margin-left: auto
  margin-right: auto
  padding-left: 10px
  padding-right: 10px


/*--------------------------------------
    Responsive helpers
--------------------------------------*/
b()
  if arguments[1]
    condition = s('only screen and (%s) and (%s)', unquote(arguments[0]), unquote(arguments[1]) )
  else
    condition = s('only screen and (%s)', unquote(arguments[0]) )

  @media condition
    {block}

w-max()
  condition = 'only screen and (max-width: %s)' % arguments[0]
  @media condition
    {block}

w-min()
  condition = 'only screen and (min-width: %s)' % arguments[0]
  @media condition
    {block}

h-max()
  condition = 'only screen and (max-height: %s)' % arguments[0]
  @media condition
    {block}

h-min()
  condition = 'only screen and (min-height: %s)' % arguments[0]
  @media condition
    {block}


fluid-width($static-w, $parent-w = $base-max-w)
  width: $static-w / $parent-w * 100%

fluid-prop($prop-name, $static-w, $parent-w)
  {$prop-name}: $static-w / $parent-w * 100%

/*--------------------------------------
    Unsorted
--------------------------------------*/
test($color = red)
  border $color !important

trans()
  transition-property arguments[0]
  if arguments[1] == true
    transition-duration arguments[1]
  else
    transition-duration $transition-duration